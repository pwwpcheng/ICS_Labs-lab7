#/* $begin ncopy-ys */
##################################################################
# ncopy.ys - Copy a src block of len ints to dst.
# Return the number of positive ints (>0) contained in src.
#
# Include your name and ID here.
#
# Describe how and why you modified the baseline code.
#
#
# Techniques Used:
# -Jumptable
# --Creating 30 independent loops to take the place of 1 instruction: jg Loop,
# --thus saving 1-3 CPE for each instruction, and decreasing about 1 CPE in ./benchmark.pl
# 
# -Jump logic optimizing
# --Branch prediction's not so effective in this prog, especially when you've looked through
# --the benchmark results. Thus ensuring copies lower than 30 having the least cycles is of
# --great importance. Make sure that the branch selections are always correct for them.
# --In this prog, jle Loopcount | jle Exit are examples of them. Switching them with instructions 
# --nearby, and the CPE will increase.
#
# -Neglecting given "Done"
# --Since we've finished adding ILEAVE and IADDL to Pipe-full.hcl,
# --it's natural and necessary to use them in this prog.
# --RRMOVL %ebp, %esp | LEAVE are taken by ILEAVE.
#
# -Implementing ILEAVE and IADDL
# 
# -Removing 3 POPL operations
# --Just for decreasing CPE, not suggested.
# 
# -Loop Unrolling
# --Not implemented, since Pipe-full.hcl has been modified to optimize MRMOVL -> RMMOVL instruction set.
# --(Illustrations are introduced in CSAPP Homework 4.57)
#
##################################################################
# Do not modify this portion
# Function prologue.
ncopy:	pushl %ebp		# Save old frame pointer
	rrmovl %esp,%ebp	# Set up new frame pointer
	pushl %esi		# Save callee-save regs
	pushl %ebx
	pushl %edi
	mrmovl 8(%ebp),%ebx	# src
	mrmovl 16(%ebp),%edx	# len
	mrmovl 12(%ebp),%ecx	# dst

##################################################################
# You can modify this portion
	# Loop header
	xorl %eax, %eax		# count = 0;
	iaddl $-30, %edx	# len <= len - 30
	jle Loopcount		# if len > 0, start copying from Loop30

Loop30:
	mrmovl 116(%ebx), %esi	# read val from src...
	andl %esi, %esi		# val <= 0?	
	rmmovl %esi, 116(%ecx)	# ...and store it to dst
	jle Loop29		# Jump to next Loop
	iaddl $1, %eax  	# count++

Loop29:
	mrmovl 112(%ebx), %esi	# read val from src...
	andl %esi, %esi		# val <= 0?	
	rmmovl %esi, 112(%ecx)	# ...and store it to dst
	jle Loop28		# Jump to next Loop
	iaddl $1, %eax  	# count++

Loop28:
	mrmovl 108(%ebx), %esi	# read val from src...
	andl %esi, %esi		# val <= 0?	
	rmmovl %esi, 108(%ecx)	# ...and store it to dst
	jle Loop27		# Jump to next Loop
	iaddl $1, %eax  	# count++

Loop27:
	mrmovl 104(%ebx), %esi	# read val from src...
	andl %esi, %esi		# val <= 0?	
	rmmovl %esi, 104(%ecx)	# ...and store it to dst
	jle Loop26		# Jump to next Loop
	iaddl $1, %eax  	# count++

Loop26:
	mrmovl 100(%ebx), %esi	# read val from src...
	andl %esi, %esi		# val <= 0?	
	rmmovl %esi, 100(%ecx)	# ...and store it to dst
	jle Loop25		# Jump to next Loop
	iaddl $1, %eax  	# count++

Loop25:
	mrmovl 96(%ebx), %esi	# read val from src...
	andl %esi, %esi		# val <= 0?	
	rmmovl %esi, 96(%ecx)	# ...and store it to dst
	jle Loop24		# Jump to next Loop
	iaddl $1, %eax  	# count++

Loop24:
	mrmovl 92(%ebx), %esi	# read val from src...
	andl %esi, %esi		# val <= 0?	
	rmmovl %esi, 92(%ecx)	# ...and store it to dst
	jle Loop23		# Jump to next Loop
	iaddl $1, %eax  	# count++

Loop23:
	mrmovl 88(%ebx), %esi	# read val from src...
	andl %esi, %esi		# val <= 0?	
	rmmovl %esi, 88(%ecx)	# ...and store it to dst
	jle Loop22		# Jump to next Loop
	iaddl $1, %eax  	# count++

Loop22:
	mrmovl 84(%ebx), %esi	# read val from src...
	andl %esi, %esi		# val <= 0?	
	rmmovl %esi, 84(%ecx)	# ...and store it to dst
	jle Loop21		# Jump to next Loop
	iaddl $1, %eax  	# count++

Loop21:
	mrmovl 80(%ebx), %esi	# read val from src...
	andl %esi, %esi		# val <= 0?	
	rmmovl %esi, 80(%ecx)	# ...and store it to dst
	jle Loop20		# Jump to next Loop
	iaddl $1, %eax  	# count++

Loop20:
	mrmovl 76(%ebx), %esi	# read val from src...
	andl %esi, %esi		# val <= 0?	
	rmmovl %esi, 76(%ecx)	# ...and store it to dst
	jle Loop19		# Jump to next Loop
	iaddl $1, %eax  	# count++
	
Loop19:
	mrmovl 72(%ebx), %esi	# read val from src...	
	andl %esi, %esi		# val <= 0?
	rmmovl %esi, 72(%ecx)	# ...and store it to dst
	jle Loop18		# Jump to next Loop
	iaddl $1, %eax  	# count++

Loop18:
	mrmovl 68(%ebx), %esi	# read val from src...	
	andl %esi, %esi		# val <= 0?
	rmmovl %esi, 68(%ecx)	# ...and store it to dst
	jle Loop17		# Jump to next Loop
	iaddl $1, %eax  	# count++

Loop17:
	mrmovl 64(%ebx), %esi	# read val from src...	
	andl %esi, %esi		# val <= 0?
	rmmovl %esi, 64(%ecx)	# ...and store it to dst
	jle Loop16		# Jump to next Loop
	iaddl $1, %eax  	# count++

Loop16:
	mrmovl 60(%ebx), %esi	# read val from src...	
	andl %esi, %esi		# val <= 0?
	rmmovl %esi, 60(%ecx)	# ...and store it to dst
	jle Loop15		# Jump to next Loop
	iaddl $1, %eax  	# count++

Loop15:
	mrmovl 56(%ebx), %esi	# read val from src...
	andl %esi, %esi		# val <= 0?	
	rmmovl %esi, 56(%ecx)	# ...and store it to dst
	jle Loop14		# Jump to next Loop
	iaddl $1, %eax  	# count++

Loop14:
	mrmovl 52(%ebx), %esi	# read val from src...	
	andl %esi, %esi		# val <= 0?
	rmmovl %esi, 52(%ecx)	# ...and store it to dst
	jle Loop13		# Jump to next Loop
	iaddl $1, %eax  	# count++

Loop13:
	mrmovl 48(%ebx), %esi	# read val from src...	
	andl %esi, %esi		# val <= 0?
	rmmovl %esi, 48(%ecx)	# ...and store it to dst
	jle Loop12		# Jump to next Loop
	iaddl $1, %eax  	# count++

Loop12:
	mrmovl 44(%ebx), %esi	# read val from src...	
	andl %esi, %esi		# val <= 0?
	rmmovl %esi, 44(%ecx)	# ...and store it to dst
	jle Loop11		# Jump to next Loop
	iaddl $1, %eax  	# count++

Loop11:
	mrmovl 40(%ebx), %esi	# read val from src...	
	andl %esi, %esi		# val <= 0?
	rmmovl %esi, 40(%ecx)	# ...and store it to dst
	jle Loop10		# Jump to next Loop
	iaddl $1, %eax  	# count++

Loop10:
	mrmovl 36(%ebx), %esi	# read val from src...
	andl %esi, %esi		# val <= 0?	
	rmmovl %esi, 36(%ecx)	# ...and store it to dst
	jle Loop9		# Jump to next Loop
	iaddl $1, %eax  	# count++

Loop9:
	mrmovl 32(%ebx), %esi	# read val from src...
	andl %esi, %esi		# val <= 0?	
	rmmovl %esi, 32(%ecx)	# ...and store it to dst
	jle Loop8		# Jump to next Loop
	iaddl $1, %eax  	# count++

Loop8:
	mrmovl 28(%ebx), %esi	# read val from src...	
	andl %esi, %esi		# val <= 0?
	rmmovl %esi, 28(%ecx)	# ...and store it to dst
	jle Loop7		# Jump to next Loop
	iaddl $1, %eax  	# count++

Loop7:
	mrmovl 24(%ebx), %esi	# read val from src...	
	andl %esi, %esi		# val <= 0?
	rmmovl %esi, 24(%ecx)	# ...and store it to dst
	jle Loop6		# Jump to next Loop
	iaddl $1, %eax  	# count++

Loop6:
	mrmovl 20(%ebx), %esi	# read val from src...	
	andl %esi, %esi		# val <= 0?
	rmmovl %esi, 20(%ecx)	# ...and store it to dst
	jle Loop5		# Jump to next Loop
	iaddl $1, %eax  	# count++

Loop5:
	mrmovl 16(%ebx), %esi	# read val from src...	
	andl %esi, %esi		# val <= 0?
	rmmovl %esi, 16(%ecx)	# ...and store it to dst
	jle Loop4		# Jump to next Loop
	iaddl $1, %eax  	# count++

Loop4:
	mrmovl 12(%ebx), %esi	# read val from src...	
	andl %esi, %esi		# val <= 0?
	rmmovl %esi, 12(%ecx)	# ...and store it to dst
	jle Loop3		# Jump to next Loop
	iaddl $1, %eax  	# count++

Loop3:
	mrmovl 8(%ebx), %esi	# read val from src...	
	andl %esi, %esi		# val <= 0?
	rmmovl %esi, 8(%ecx)	# ...and store it to dst
	jle Loop2		# Jump to next Loop
	iaddl $1, %eax  	# count++

Loop2:
	mrmovl 4(%ebx), %esi	# read val from src...	
	andl %esi, %esi		# val <= 0?
	rmmovl %esi, 4(%ecx)	# ...and store it to dst
	jle Loop1		# Jump to next Loop
	iaddl $1, %eax  	# count++

Loop1:
	mrmovl (%ebx), %esi	# read val from src...	
	andl %esi, %esi		# val <= 0?
	rmmovl %esi, (%ecx)	# ...and store it to dst
	jle EndLoop		# Jump to next Loop
	iaddl $1, %eax  	# count++

EndLoop:
	andl %edx, %edx		# judge if %edx <= 0
	jle Exit 		# if so, goto Start1: 
	
Start1:	iaddl $120, %ebx	# src <= src + 30*sizeof(int) = src + 120
	iaddl $120, %ecx	# dst <= dst + 120
	iaddl $-30, %edx	# len <= len - 30
	jle Loopcount		  # if len < 0, then use Loopcount to jump to the correct location
	jmp Loop30        # if len > 0, then directly jump to Loop 30 to start another 30 Loops

Loopcount:
	addl %edx, %edx  #
	addl %edx, %edx  # %edx *= 4
	mrmovl JT(%edx), %edi  # calculate with JT to find the desiring jumping point
	pushl %edi       # the same as JMP %edi, but it's an illegal operation in Y86
	ret              # use PUSHL RET combination as a substitute method.

Exit:   leave			# Restore callee-save registers
	ret

	.align 4
	.long Exit
	.long Loop1
	.long Loop2
	.long Loop3
	.long Loop4
	.long Loop5
	.long Loop6
	.long Loop7
	.long Loop8
	.long Loop9
	.long Loop10
	.long Loop11
	.long Loop12
	.long Loop13
	.long Loop14
	.long Loop15
	.long Loop16
	.long Loop17
	.long Loop18
	.long Loop19
	.long Loop20
	.long Loop21
	.long Loop22
	.long Loop23
	.long Loop24
	.long Loop25
	.long Loop26
	.long Loop27
	.long Loop28
	.long Loop29
JT:	.long Loop30

##################################################################
# Do not modify the following section of code
# Function epilogue.
Done:
	popl %edi               # Restore callee-save registers
	popl %ebx
	popl %esi
	rrmovl %ebp, %esp
	popl %ebp
	ret
##################################################################
# Keep the following label at the end of your function
End:
#/* $end ncopy-ys */
